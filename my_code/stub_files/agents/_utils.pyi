from _typeshed import Incomplete
from camel.agents._types import ToolCallRequest as ToolCallRequest
from camel.toolkits import FunctionTool
from camel.types import Choice
from camel.types.agents import ToolCallingRecord as ToolCallingRecord
from typing import Any, Callable

logger: Incomplete

def generate_tool_prompt(tool_schema_list: list[dict[str, Any]]) -> str: ...
def extract_tool_call(content: str) -> dict[str, Any] | None: ...
def safe_model_dump(obj) -> dict[str, Any]: ...
def convert_to_function_tool(tool: FunctionTool | Callable) -> FunctionTool: ...
def convert_to_schema(tool: FunctionTool | Callable | dict[str, Any]) -> dict[str, Any]: ...
def get_info_dict(session_id: str | None, usage: dict[str, int] | None, termination_reasons: list[str], num_tokens: int, tool_calls: list[ToolCallingRecord], external_tool_call_requests: list[ToolCallRequest] | None = None) -> dict[str, Any]: ...
def handle_logprobs(choice: Choice) -> list[dict[str, Any]] | None: ...
