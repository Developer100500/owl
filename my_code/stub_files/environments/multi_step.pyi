from _typeshed import Incomplete
from abc import ABC, abstractmethod
from camel.environments.models import Action, Observation
from camel.extractors.base import BaseExtractor
from typing import Any

logger: Incomplete

class MultiStepEnv(ABC):
    extractor: Incomplete
    max_steps: Incomplete
    def __init__(self, extractor: BaseExtractor, max_steps: int | None = None, **kwargs) -> None: ...
    async def setup(self) -> None: ...
    async def close(self) -> None: ...
    async def reset(self) -> Observation: ...
    async def step(self, action: Action) -> tuple[Observation, float, bool, dict[str, Any]]: ...
    @abstractmethod
    async def compute_reward(self) -> tuple[float, dict[str, float]]: ...
    def is_done(self) -> bool: ...
    @property
    def metadata(self) -> dict[str, Any]: ...
    @property
    def current_step(self) -> int: ...
