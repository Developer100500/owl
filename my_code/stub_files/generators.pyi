from _typeshed import Incomplete
from camel.messages import BaseMessage
from camel.prompts import TextPrompt as TextPrompt
from camel.types import RoleType, TaskType
from typing import Generator

class SystemMessageGenerator:
    sys_prompts: dict[RoleType, str]
    sys_msg_meta_dict_keys: Incomplete
    def __init__(self, task_type: TaskType = ..., sys_prompts: dict[RoleType, str] | None = None, sys_msg_meta_dict_keys: set[str] | None = None) -> None: ...
    def validate_meta_dict_keys(self, meta_dict: dict[str, str]) -> None: ...
    def from_dict(self, meta_dict: dict[str, str], role_tuple: tuple[str, RoleType] = ...) -> BaseMessage: ...
    def from_dicts(self, meta_dicts: list[dict[str, str]], role_tuples: list[tuple[str, RoleType]]) -> list[BaseMessage]: ...

class RoleNameGenerator:
    assistant_role_names: Incomplete
    user_role_names: Incomplete
    def __init__(self, assistant_role_names_path: str = 'data/ai_society/assistant_roles.txt', user_role_names_path: str = 'data/ai_society/user_roles.txt', assistant_role_names: list[str] | None = None, user_role_names: list[str] | None = None) -> None: ...
    def from_role_files(self) -> Generator[tuple, None, None]: ...

class AISocietyTaskPromptGenerator:
    generate_tasks_prompt: Incomplete
    num_tasks: Incomplete
    def __init__(self, num_tasks: int = 10) -> None: ...
    def from_role_files(self, assistant_role_names_path: str = 'data/ai_society/assistant_roles.txt', user_role_names_path: str = 'data/ai_society/user_roles.txt') -> Generator[tuple[str, tuple[str, str]], None, None]: ...
    def from_role_generator(self, role_generator: Generator[tuple, None, None]) -> Generator[tuple[str, tuple[str, str]], None, None]: ...

class SingleTxtGenerator:
    data_list: Incomplete
    def __init__(self, text_file_path: str) -> None: ...
    def from_role_files(self) -> Generator[str, None, None]: ...

class CodeTaskPromptGenerator:
    generate_tasks_prompt: Incomplete
    num_tasks: Incomplete
    def __init__(self, num_tasks: int = 50) -> None: ...
    def from_role_files(self, languages_path: str = 'data/code/languages.txt', domains_path: str = 'data/code/domains.txt') -> Generator[tuple[TextPrompt, str, str], None, None]: ...
    def from_role_generator(self, role_generator: Generator[tuple, None, None]) -> Generator[str, None, None]: ...
