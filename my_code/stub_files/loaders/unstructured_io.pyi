from typing import Any, IO, Literal
from unstructured.documents.elements import Element

class UnstructuredIO:
    @staticmethod
    def create_element_from_text(text: str, element_id: str | None = None, embeddings: list[float] | None = None, filename: str | None = None, file_directory: str | None = None, last_modified: str | None = None, filetype: str | None = None, parent_id: str | None = None) -> Element: ...
    @staticmethod
    def parse_file_or_url(input_path: str, **kwargs: Any) -> list['Element'] | None: ...
    @staticmethod
    def parse_bytes(file: IO[bytes], **kwargs: Any) -> list['Element'] | None: ...
    @staticmethod
    def clean_text_data(text: str, clean_options: list[tuple[str, dict[str, Any]]] | None = None) -> str: ...
    @staticmethod
    def extract_data_from_text(text: str, extract_type: Literal['extract_datetimetz', 'extract_email_address', 'extract_ip_address', 'extract_ip_address_name', 'extract_mapi_id', 'extract_ordered_bullets', 'extract_text_after', 'extract_text_before', 'extract_us_phone_number'], **kwargs) -> Any: ...
    @staticmethod
    def stage_elements(elements: list[Any], stage_type: Literal['convert_to_csv', 'convert_to_dataframe', 'convert_to_dict', 'dict_to_elements', 'stage_csv_for_prodigy', 'stage_for_prodigy', 'stage_for_baseplate', 'stage_for_datasaur', 'stage_for_label_box', 'stage_for_label_studio', 'stage_for_weaviate'], **kwargs) -> str | list[dict] | Any: ...
    @staticmethod
    def chunk_elements(elements: list['Element'], chunk_type: str, **kwargs) -> list['Element']: ...
