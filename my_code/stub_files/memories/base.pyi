from abc import ABC, abstractmethod
from camel.memories.records import ContextRecord as ContextRecord, MemoryRecord
from camel.messages import OpenAIMessage as OpenAIMessage
from camel.utils import BaseTokenCounter

class MemoryBlock(ABC):
    @abstractmethod
    def write_records(self, records: list[MemoryRecord]) -> None: ...
    def write_record(self, record: MemoryRecord) -> None: ...
    @abstractmethod
    def clear(self) -> None: ...

class BaseContextCreator(ABC):
    @property
    @abstractmethod
    def token_counter(self) -> BaseTokenCounter: ...
    @property
    @abstractmethod
    def token_limit(self) -> int: ...
    @abstractmethod
    def create_context(self, records: list[ContextRecord]) -> tuple[list[OpenAIMessage], int]: ...

class AgentMemory(MemoryBlock, ABC):
    @property
    @abstractmethod
    def agent_id(self) -> str | None: ...
    @agent_id.setter
    @abstractmethod
    def agent_id(self, val: str | None) -> None: ...
    @abstractmethod
    def retrieve(self) -> list[ContextRecord]: ...
    @abstractmethod
    def get_context_creator(self) -> BaseContextCreator: ...
    def get_context(self) -> tuple[list[OpenAIMessage], int]: ...
