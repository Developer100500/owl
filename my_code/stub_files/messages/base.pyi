from PIL import Image
from camel.messages import FunctionCallFormatter as FunctionCallFormatter, OpenAIAssistantMessage, OpenAIMessage, OpenAISystemMessage, OpenAIUserMessage
from camel.messages.conversion import ShareGPTMessage
from camel.prompts import CodePrompt, TextPrompt
from camel.types import OpenAIBackendRole, OpenAIVisionDetailType, RoleType
from dataclasses import dataclass
from pydantic import BaseModel as BaseModel
from typing import Any, Literal

@dataclass
class BaseMessage:
    role_name: str
    role_type: RoleType
    meta_dict: dict[str, Any] | None
    content: str
    video_bytes: bytes | None = ...
    image_list: list[Image.Image] | None = ...
    image_detail: Literal['auto', 'low', 'high'] = ...
    video_detail: Literal['auto', 'low', 'high'] = ...
    parsed: BaseModel | dict | None = ...
    @classmethod
    def make_user_message(cls, role_name: str, content: str, meta_dict: dict[str, str] | None = None, video_bytes: bytes | None = None, image_list: list[Image.Image] | None = None, image_detail: OpenAIVisionDetailType | str = ..., video_detail: OpenAIVisionDetailType | str = ...) -> BaseMessage: ...
    @classmethod
    def make_assistant_message(cls, role_name: str, content: str, meta_dict: dict[str, str] | None = None, video_bytes: bytes | None = None, image_list: list[Image.Image] | None = None, image_detail: OpenAIVisionDetailType | str = ..., video_detail: OpenAIVisionDetailType | str = ...) -> BaseMessage: ...
    def create_new_instance(self, content: str) -> BaseMessage: ...
    def __add__(self, other: Any) -> BaseMessage | Any: ...
    def __mul__(self, other: Any) -> BaseMessage | Any: ...
    def __len__(self) -> int: ...
    def __contains__(self, item: str) -> bool: ...
    def extract_text_and_code_prompts(self) -> tuple[list[TextPrompt], list[CodePrompt]]: ...
    @classmethod
    def from_sharegpt(cls, message: ShareGPTMessage, function_format: FunctionCallFormatter[Any, Any] | None = None, role_mapping=None) -> BaseMessage: ...
    def to_sharegpt(self, function_format: FunctionCallFormatter | None = None) -> ShareGPTMessage: ...
    def to_openai_message(self, role_at_backend: OpenAIBackendRole) -> OpenAIMessage: ...
    def to_openai_system_message(self) -> OpenAISystemMessage: ...
    def to_openai_user_message(self) -> OpenAIUserMessage: ...
    def to_openai_assistant_message(self) -> OpenAIAssistantMessage: ...
    def to_dict(self) -> dict: ...
