from camel.messages import BaseMessage, OpenAIAssistantMessage, OpenAIMessage, OpenAIToolMessageParam
from camel.messages.conversion import ShareGPTMessage, ToolCall as ToolCall, ToolResponse as ToolResponse
from camel.messages.conversion.sharegpt.function_call_formatter import FunctionCallFormatter as FunctionCallFormatter
from camel.types import OpenAIBackendRole
from dataclasses import dataclass
from typing import Any

@dataclass
class FunctionCallingMessage(BaseMessage):
    func_name: str | None = ...
    args: dict | None = ...
    result: Any | None = ...
    tool_call_id: str | None = ...
    def to_openai_message(self, role_at_backend: OpenAIBackendRole) -> OpenAIMessage: ...
    def to_sharegpt(self, function_format: FunctionCallFormatter[ToolCall, ToolResponse] | None = None) -> ShareGPTMessage: ...
    def to_openai_assistant_message(self) -> OpenAIAssistantMessage: ...
    def to_openai_tool_message(self) -> OpenAIToolMessageParam: ...
