from _typeshed import Incomplete
from camel.tasks import Task
from enum import Enum

class PacketStatus(Enum):
    SENT: str
    RETURNED: str
    ARCHIVED: str

class Packet:
    task: Incomplete
    publisher_id: Incomplete
    assignee_id: Incomplete
    status: Incomplete
    def __init__(self, task: Task, publisher_id: str, assignee_id: str | None = None, status: PacketStatus = ...) -> None: ...

class TaskChannel:
    def __init__(self) -> None: ...
    async def get_returned_task_by_publisher(self, publisher_id: str) -> Task: ...
    async def get_assigned_task_by_assignee(self, assignee_id: str) -> Task: ...
    async def post_task(self, task: Task, publisher_id: str, assignee_id: str) -> None: ...
    async def post_dependency(self, dependency: Task, publisher_id: str) -> None: ...
    async def return_task(self, task_id: str) -> None: ...
    async def archive_task(self, task_id: str) -> None: ...
    async def remove_task(self, task_id: str) -> None: ...
    async def get_dependency_ids(self) -> list[str]: ...
    async def get_task_by_id(self, task_id: str) -> Task: ...
    async def get_channel_debug_info(self) -> str: ...
