from abc import ABC, abstractmethod
from typing import Any

class BaseGraphStorage(ABC):
    @property
    @abstractmethod
    def get_client(self) -> Any: ...
    @property
    @abstractmethod
    def get_schema(self) -> str: ...
    @property
    @abstractmethod
    def get_structured_schema(self) -> dict[str, Any]: ...
    @abstractmethod
    def refresh_schema(self) -> None: ...
    @abstractmethod
    def add_triplet(self, subj: str, obj: str, rel: str) -> None: ...
    @abstractmethod
    def delete_triplet(self, subj: str, obj: str, rel: str) -> None: ...
    @abstractmethod
    def query(self, query: str, params: dict[str, Any] | None = None) -> list[dict[str, Any]]: ...
