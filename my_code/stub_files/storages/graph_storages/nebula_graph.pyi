from _typeshed import Incomplete
from camel.storages.graph_storages.base import BaseGraphStorage
from camel.storages.graph_storages.graph_element import GraphElement as GraphElement
from nebula3.data.ResultSet import ResultSet
from typing import Any

logger: Incomplete
MAX_RETRIES: int
RETRY_DELAY: int

class NebulaGraph(BaseGraphStorage):
    host: Incomplete
    username: Incomplete
    password: Incomplete
    space: Incomplete
    timeout: Incomplete
    port: Incomplete
    schema: str
    structured_schema: dict[str, Any]
    connection_pool: Incomplete
    session: Incomplete
    def __init__(self, host, username, password, space, port: int = 9669, timeout: int = 10000) -> None: ...
    @property
    def get_client(self) -> Any: ...
    def query(self, query: str) -> ResultSet: ...
    def get_relationship_types(self) -> list[str]: ...
    def add_graph_elements(self, graph_elements: list[GraphElement]) -> None: ...
    def ensure_edge_type_exists(self, edge_type: str, time_label: str | None = None) -> None: ...
    def ensure_tag_exists(self, tag_name: str, time_label: str | None = None) -> None: ...
    def add_node(self, node_id: str, tag_name: str, time_label: str | None = None) -> None: ...
    def refresh_schema(self) -> None: ...
    @property
    def get_structured_schema(self) -> dict[str, Any]: ...
    def get_schema(self): ...
    def get_indexes(self): ...
    def add_triplet(self, subj: str, obj: str, rel: str, time_label: str | None = None) -> None: ...
    def delete_triplet(self, subj: str, obj: str, rel: str) -> None: ...
    def delete_entity(self, entity_id: str) -> None: ...
    def get_node_properties(self) -> tuple[list[str], list[dict[str, Any]]]: ...
    def get_relationship_properties(self) -> tuple[list[str], list[dict[str, Any]]]: ...
