from _typeshed import Incomplete
from camel.storages.graph_storages import BaseGraphStorage, GraphElement as GraphElement
from typing import Any

logger: Incomplete
BASE_ENTITY_LABEL: str
EXCLUDED_LABELS: Incomplete
EXCLUDED_RELS: Incomplete
NODE_PROPERTY_QUERY: str
REL_PROPERTY_QUERY: str
REL_QUERY: str
INCLUDE_DOCS_QUERY: str
LIST_LIMIT: int

class Neo4jGraph(BaseGraphStorage):
    driver: Incomplete
    database: Incomplete
    timeout: Incomplete
    truncate: Incomplete
    schema: str
    structured_schema: dict[str, Any]
    def __init__(self, url: str, username: str, password: str, database: str = 'neo4j', timeout: float | None = None, truncate: bool = False) -> None: ...
    @property
    def get_client(self) -> Any: ...
    @property
    def get_schema(self, refresh: bool = False) -> str: ...
    @property
    def get_structured_schema(self) -> dict[str, Any]: ...
    def query(self, query: str, params: dict[str, Any] | None = None) -> list[dict[str, Any]]: ...
    def refresh_schema(self) -> None: ...
    def add_triplet(self, subj: str, obj: str, rel: str, timestamp: str | None = None) -> None: ...
    def delete_triplet(self, subj: str, obj: str, rel: str) -> None: ...
    def add_graph_elements(self, graph_elements: list[GraphElement], include_source: bool = False, base_entity_label: bool = False) -> None: ...
    def random_walk_with_restarts(self, graph_name: str, sampling_ratio: float, start_node_ids: list[int], restart_probability: float = 0.1, node_label_stratification: bool = False, relationship_weight_property: str | None = None) -> dict[str, Any]: ...
    def common_neighbour_aware_random_walk(self, graph_name: str, sampling_ratio: float, start_node_ids: list[int], node_label_stratification: bool = False, relationship_weight_property: str | None = None) -> dict[str, Any]: ...
    def get_triplet(self, subj: str | None = None, obj: str | None = None, rel: str | None = None) -> list[dict[str, Any]]: ...
