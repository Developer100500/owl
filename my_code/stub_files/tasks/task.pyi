from camel.agents import ChatAgent
from camel.messages import BaseMessage
from camel.prompts import TextPrompt
from enum import Enum
from pydantic import BaseModel
from typing import Callable, Literal

def parse_response(response: str, task_id: str | None = None) -> list['Task']: ...

class TaskState(str, Enum):
    OPEN: str
    RUNNING: str
    DONE: str
    FAILED: str
    DELETED: str
    @classmethod
    def states(cls): ...

class Task(BaseModel):
    content: str
    id: str
    state: TaskState
    type: str | None
    parent: Task | None
    subtasks: list['Task']
    result: str | None
    failure_count: int
    additional_info: str | None
    @classmethod
    def from_message(cls, message: BaseMessage) -> Task: ...
    @staticmethod
    def to_message() -> None: ...
    def reset(self) -> None: ...
    def update_result(self, result: str): ...
    def set_id(self, id: str): ...
    def set_state(self, state: TaskState): ...
    def add_subtask(self, task: Task): ...
    def remove_subtask(self, id: str): ...
    def get_running_task(self) -> Task | None: ...
    def to_string(self, indent: str = '', state: bool = False) -> str: ...
    def get_result(self, indent: str = '') -> str: ...
    def decompose(self, agent: ChatAgent, prompt: str | None = None, task_parser: Callable[[str, str], list['Task']] = ...) -> list['Task']: ...
    def compose(self, agent: ChatAgent, template: TextPrompt = ..., result_parser: Callable[[str], str] | None = None): ...
    def get_depth(self) -> int: ...

class TaskManager:
    root_task: Task
    current_task_id: str
    tasks: list[Task]
    task_map: dict[str, Task]
    def __init__(self, task: Task) -> None: ...
    def gen_task_id(self) -> str: ...
    def exist(self, task_id: str) -> bool: ...
    @property
    def current_task(self) -> Task | None: ...
    @staticmethod
    def topological_sort(tasks: list[Task]) -> list[Task]: ...
    @staticmethod
    def set_tasks_dependence(root: Task, others: list[Task], type: Literal['serial', 'parallel'] = 'parallel'): ...
    def add_tasks(self, tasks: Task | list[Task]) -> None: ...
    def evolve(self, task: Task, agent: ChatAgent, template: TextPrompt | None = None, task_parser: Callable[[str, str], list[Task]] | None = None) -> Task | None: ...
