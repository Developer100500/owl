import io
from PIL import Image
from _typeshed import Incomplete
from camel.models import BaseModelBackend as BaseModelBackend
from camel.toolkits.base import BaseToolkit
from camel.toolkits.function_tool import FunctionTool
from typing import Any, Literal, TypedDict

logger: Incomplete
TOP_NO_LABEL_ZONE: int
AVAILABLE_ACTIONS_PROMPT: str
ACTION_WITH_FEEDBACK_LIST: Incomplete

class DOMRectangle(TypedDict):
    x: int | float
    y: int | float
    width: int | float
    height: int | float
    top: int | float
    right: int | float
    bottom: int | float
    left: int | float

class VisualViewport(TypedDict):
    height: int | float
    width: int | float
    offsetLeft: int | float
    offsetTop: int | float
    pageLeft: int | float
    pageTop: int | float
    scale: int | float
    clientWidth: int | float
    clientHeight: int | float
    scrollWidth: int | float
    scrollHeight: int | float

class InteractiveRegion(TypedDict):
    tag_name: str
    role: str
    aria_name: str
    v_scrollable: bool
    rects: list[DOMRectangle]

def dom_rectangle_from_dict(rect: dict[str, Any]) -> DOMRectangle: ...
def interactive_region_from_dict(region: dict[str, Any]) -> InteractiveRegion: ...
def visual_viewport_from_dict(viewport: dict[str, Any]) -> VisualViewport: ...
def add_set_of_mark(screenshot: bytes | Image.Image | io.BufferedIOBase, ROIs: dict[str, InteractiveRegion]) -> tuple[Image.Image, list[str], list[str], list[str]]: ...

class BaseBrowser:
    history: list
    headless: Incomplete
    channel: Incomplete
    playwright: Incomplete
    page_history: list
    cookie_json_path: Incomplete
    cache_dir: Incomplete
    page_script: Incomplete
    def __init__(self, headless: bool = True, cache_dir: str | None = None, channel: Literal['chrome', 'msedge', 'chromium'] = 'chromium', cookie_json_path: str | None = None) -> None: ...
    browser: Incomplete
    context: Incomplete
    page: Incomplete
    def init(self) -> None: ...
    def clean_cache(self) -> None: ...
    def click_blank_area(self) -> None: ...
    page_url: Incomplete
    def visit_page(self, url: str) -> None: ...
    def ask_question_about_video(self, question: str) -> str: ...
    def get_screenshot(self, save_image: bool = False) -> tuple[Image.Image, str | None]: ...
    def capture_full_page_screenshots(self, scroll_ratio: float = 0.8) -> list[str]: ...
    def get_visual_viewport(self) -> VisualViewport: ...
    def get_interactive_elements(self) -> dict[str, InteractiveRegion]: ...
    def get_som_screenshot(self, save_image: bool = False) -> tuple[Image.Image, str | None]: ...
    def scroll_up(self) -> None: ...
    def scroll_down(self) -> None: ...
    def get_url(self) -> str: ...
    def click_id(self, identifier: str | int) -> None: ...
    def extract_url_content(self) -> str: ...
    def download_file_id(self, identifier: str | int) -> str: ...
    def fill_input_id(self, identifier: str | int, text: str) -> str: ...
    def scroll_to_bottom(self) -> str: ...
    def scroll_to_top(self) -> str: ...
    def hover_id(self, identifier: str | int) -> str: ...
    def find_text_on_page(self, search_text: str) -> str: ...
    def back(self) -> None: ...
    def close(self) -> None: ...
    def show_interactive_elements(self) -> None: ...
    def get_webpage_content(self) -> str: ...

class BrowserToolkit(BaseToolkit):
    browser: Incomplete
    history_window: Incomplete
    web_agent_model: Incomplete
    planning_agent_model: Incomplete
    output_language: Incomplete
    history: list
    def __init__(self, headless: bool = False, cache_dir: str | None = None, channel: Literal['chrome', 'msedge', 'chromium'] = 'chromium', history_window: int = 5, web_agent_model: BaseModelBackend | None = None, planning_agent_model: BaseModelBackend | None = None, output_language: str = 'en', cookie_json_path: str | None = None) -> None: ...
    def browse_url(self, task_prompt: str, start_url: str, round_limit: int = 12) -> str: ...
    def get_tools(self) -> list[FunctionTool]: ...
