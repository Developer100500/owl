from _typeshed import Incomplete
from camel.toolkits import FunctionTool
from camel.toolkits.base import BaseToolkit
from typing import Any

logger: Incomplete

class DataCommonsToolkit(BaseToolkit):
    def __init__(self, timeout: float | None = None) -> None: ...
    def query_data_commons(self, query_string: str) -> list[dict[str, Any]] | None: ...
    def get_triples(self, dcids: str | list[str], limit: int = 500) -> dict[str, list[tuple]] | None: ...
    def get_stat_time_series(self, place: str, stat_var: str, measurement_method: str | None = None, observation_period: str | None = None, unit: str | None = None, scaling_factor: str | None = None) -> dict[str, Any] | None: ...
    def get_property_labels(self, dcids: str | list[str], out: bool = True) -> dict[str, list[str]] | None: ...
    def get_property_values(self, dcids: str | list[str], prop: str, out: bool | None = True, value_type: str | None = None, limit: int | None = None) -> dict[str, Any] | None: ...
    def get_places_in(self, dcids: list, place_type: str) -> dict[str, Any] | None: ...
    def get_stat_value(self, place: str, stat_var: str, date: str | None = None, measurement_method: str | None = None, observation_period: str | None = None, unit: str | None = None, scaling_factor: str | None = None) -> float | None: ...
    def get_stat_all(self, places: str, stat_vars: str) -> dict | None: ...
    def get_tools(self) -> list[FunctionTool]: ...
