from _typeshed import Incomplete
from camel.models import BaseModelBackend as BaseModelBackend
from pydantic import BaseModel
from typing import Any, Callable

logger: Incomplete

def get_openai_function_schema(func: Callable) -> dict[str, Any]: ...
def get_openai_tool_schema(func: Callable) -> dict[str, Any]: ...
def sanitize_and_enforce_required(parameters_dict): ...
def generate_docstring(code: str, model: BaseModelBackend | None = None) -> str: ...

class FunctionTool:
    func: Incomplete
    openai_tool_schema: Incomplete
    synthesize_output: Incomplete
    synthesize_output_model: Incomplete
    synthesize_output_format: type[BaseModel] | None
    synthesize_schema_model: Incomplete
    def __init__(self, func: Callable, openai_tool_schema: dict[str, Any] | None = None, synthesize_schema: bool | None = False, synthesize_schema_model: BaseModelBackend | None = None, synthesize_schema_max_retries: int = 2, synthesize_output: bool | None = False, synthesize_output_model: BaseModelBackend | None = None, synthesize_output_format: type[BaseModel] | None = None) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    async def async_call(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def is_async(self) -> bool: ...
    @staticmethod
    def validate_openai_tool_schema(openai_tool_schema: dict[str, Any]) -> None: ...
    def get_openai_tool_schema(self) -> dict[str, Any]: ...
    def set_openai_tool_schema(self, schema: dict[str, Any]) -> None: ...
    def get_openai_function_schema(self) -> dict[str, Any]: ...
    def set_openai_function_schema(self, openai_function_schema: dict[str, Any]) -> None: ...
    def get_function_name(self) -> str: ...
    def set_function_name(self, name: str) -> None: ...
    def get_function_description(self) -> str: ...
    def set_function_description(self, description: str) -> None: ...
    def get_paramter_description(self, param_name: str) -> str: ...
    def set_paramter_description(self, param_name: str, description: str) -> None: ...
    def get_parameter(self, param_name: str) -> dict[str, Any]: ...
    def set_parameter(self, param_name: str, value: dict[str, Any]): ...
    def synthesize_openai_tool_schema(self, max_retries: int | None = None) -> dict[str, Any]: ...
    def synthesize_execution_output(self, args: tuple[Any, ...] | None = None, kwargs: dict[str, Any] | None = None) -> Any: ...
    @property
    def parameters(self) -> dict[str, Any]: ...
    @parameters.setter
    def parameters(self, value: dict[str, Any]) -> None: ...
