from _typeshed import Incomplete
from camel.toolkits import FunctionTool
from camel.toolkits.base import BaseToolkit
from typing import Literal

logger: Incomplete

class GithubToolkit(BaseToolkit):
    github: Incomplete
    repo: Incomplete
    def __init__(self, repo_name: str, access_token: str | None = None, timeout: float | None = None) -> None: ...
    def get_github_access_token(self) -> str: ...
    def create_pull_request(self, file_path: str, new_content: str, pr_title: str, body: str, branch_name: str) -> str: ...
    def get_issue_list(self, state: Literal['open', 'closed', 'all'] = 'all') -> list[dict[str, object]]: ...
    def get_issue_content(self, issue_number: int) -> str: ...
    def get_pull_request_list(self, state: Literal['open', 'closed', 'all'] = 'all') -> list[dict[str, object]]: ...
    def get_pull_request_code(self, pr_number: int) -> list[dict[str, str]]: ...
    def get_pull_request_comments(self, pr_number: int) -> list[dict[str, str]]: ...
    def get_all_file_paths(self, path: str = '') -> list[str]: ...
    def retrieve_file_content(self, file_path: str) -> str: ...
    def get_tools(self) -> list[FunctionTool]: ...
