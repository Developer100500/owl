from _typeshed import Incomplete
from camel.toolkits import BaseToolkit, FunctionTool
from collections.abc import Generator
from contextlib import asynccontextmanager
from mcp import ClientSession, ListToolsResult as ListToolsResult, Tool
from typing import Any, AsyncGenerator, Callable

logger: Incomplete

class MCPClient(BaseToolkit):
    command_or_url: Incomplete
    args: Incomplete
    env: Incomplete
    headers: Incomplete
    strict: Incomplete
    def __init__(self, command_or_url: str, args: list[str] | None = None, env: dict[str, str] | None = None, timeout: float | None = None, headers: dict[str, str] | None = None, strict: bool | None = False) -> None: ...
    async def connect(self): ...
    async def disconnect(self) -> None: ...
    @asynccontextmanager
    async def connection(self) -> Generator[Incomplete]: ...
    async def list_mcp_tools(self) -> str | ListToolsResult: ...
    def generate_function_from_mcp_tool(self, mcp_tool: Tool) -> Callable: ...
    def get_tools(self) -> list[FunctionTool]: ...
    def get_text_tools(self) -> str: ...
    async def call_tool(self, tool_name: str, tool_args: dict[str, Any]) -> Any: ...
    @property
    def session(self) -> ClientSession | None: ...

class MCPToolkit(BaseToolkit):
    servers: list[MCPClient]
    def __init__(self, servers: list[MCPClient] | None = None, config_path: str | None = None, config_dict: dict[str, Any] | None = None, strict: bool | None = False) -> None: ...
    async def connect(self): ...
    async def disconnect(self) -> None: ...
    @asynccontextmanager
    async def connection(self) -> AsyncGenerator['MCPToolkit', None]: ...
    def is_connected(self) -> bool: ...
    def get_tools(self) -> list[FunctionTool]: ...
    def get_text_tools(self) -> str: ...
