from _typeshed import Incomplete
from camel.toolkits import FunctionTool
from camel.toolkits.base import BaseToolkit
from typing import Any, Callable, Literal

logger: Incomplete

class NetworkXToolkit(BaseToolkit):
    graph: Incomplete
    def __init__(self, timeout: float | None = None, graph_type: Literal['graph', 'digraph', 'multigraph', 'multidigraph'] = 'graph') -> None: ...
    def add_node(self, node_id: str, **attributes: Any) -> None: ...
    def add_edge(self, source: str, target: str, **attributes: Any) -> None: ...
    def get_nodes(self) -> list[str]: ...
    def get_edges(self) -> list[tuple[str, str]]: ...
    def get_shortest_path(self, source: str, target: str, weight: str | Callable | None = None, method: Literal['dijkstra', 'bellman-ford'] = 'dijkstra') -> list[str]: ...
    def compute_centrality(self) -> dict[str, float]: ...
    def serialize_graph(self) -> str: ...
    def deserialize_graph(self, data: str) -> None: ...
    def export_to_file(self, file_path: str) -> None: ...
    def import_from_file(self, file_path: str) -> None: ...
    def clear_graph(self) -> None: ...
    def get_tools(self) -> list[FunctionTool]: ...
