from camel.toolkits.base import BaseToolkit
from camel.toolkits.function_tool import FunctionTool
from typing import Any, Literal

class SearchToolkit(BaseToolkit):
    def search_wiki(self, entity: str) -> str: ...
    def search_linkup(self, query: str, depth: Literal['standard', 'deep'] = 'standard', output_type: Literal['searchResults', 'sourcedAnswer', 'structured'] = 'searchResults', structured_output_schema: str | None = None) -> dict[str, Any]: ...
    def search_duckduckgo(self, query: str, source: str = 'text', max_results: int = 5) -> list[dict[str, Any]]: ...
    def search_brave(self, q: str, country: str = 'US', search_lang: str = 'en', ui_lang: str = 'en-US', count: int = 20, offset: int = 0, safesearch: str = 'moderate', freshness: str | None = None, text_decorations: bool = True, spellcheck: bool = True, result_filter: str | None = None, goggles_id: str | None = None, units: str | None = None, extra_snippets: bool | None = None, summary: bool | None = None) -> dict[str, Any]: ...
    def search_google(self, query: str, num_result_pages: int = 5) -> list[dict[str, Any]]: ...
    def query_wolfram_alpha(self, query: str, is_detailed: bool = False) -> str | dict[str, Any]: ...
    def tavily_search(self, query: str, num_results: int = 5, **kwargs) -> list[dict[str, Any]]: ...
    def search_bocha(self, query: str, freshness: str = 'noLimit', summary: bool = False, count: int = 10, page: int = 1) -> dict[str, Any]: ...
    def search_baidu(self, query: str, max_results: int = 5) -> dict[str, Any]: ...
    def search_bing(self, query: str, max_results: int = 5) -> dict[str, Any]: ...
    def search_exa(self, query: str, search_type: Literal['auto', 'neural', 'keyword'] = 'auto', category: Literal['company', 'research paper', 'news', 'pdf', 'github', 'tweet', 'personal site', 'linkedin profile', 'financial report'] | None = None, num_results: int = 10, include_text: list[str] | None = None, exclude_text: list[str] | None = None, use_autoprompt: bool = True, text: bool = False) -> dict[str, Any]: ...
    def search_alibaba_tongxiao(self, query: str, time_range: Literal['OneDay', 'OneWeek', 'OneMonth', 'OneYear', 'NoLimit'] = 'NoLimit', industry: Literal['finance', 'law', 'medical', 'internet', 'tax', 'news_province', 'news_center'] | None = None, page: int = 1, return_main_text: bool = False, return_markdown_text: bool = True, enable_rerank: bool = True) -> dict[str, Any]: ...
    def get_tools(self) -> list[FunctionTool]: ...
