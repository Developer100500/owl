import requests
from _typeshed import Incomplete
from camel.types import TaskType
from pathlib import Path
from pydantic import BaseModel as BaseModel
from typing import Any, Callable, TypeVar

F = TypeVar('F', bound=Callable[..., Any])
logger: Incomplete

def print_text_animated(text, delay: float = 0.02, end: str = ''): ...
def get_prompt_template_key_words(template: str) -> set[str]: ...
def get_first_int(string: str) -> int | None: ...
def download_tasks(task: TaskType, folder_path: str) -> None: ...
def get_task_list(task_response: str) -> list[str]: ...
def check_server_running(server_url: str) -> bool: ...
def dependencies_required(*required_modules: str) -> Callable[[F], F]: ...
def is_module_available(module_name: str) -> bool: ...
def api_keys_required(param_env_list: list[tuple[str | None, str]]) -> Callable[[F], F]: ...
def get_system_information(): ...
def to_pascal(snake: str) -> str: ...
def get_pydantic_major_version() -> int: ...
def get_pydantic_object_schema(pydantic_params: type[BaseModel]) -> dict: ...
def func_string_to_callable(code: str): ...
def json_to_function_code(json_obj: dict) -> str: ...
def text_extract_from_web(url: str) -> str: ...
def create_chunks(text: str, n: int) -> list[str]: ...
def is_docker_running() -> bool: ...
def agentops_decorator(func): ...

class AgentOpsMeta(type):
    def __new__(cls, name, bases, dct): ...

def track_agent(*args, **kwargs): ...
def handle_http_error(response: requests.Response) -> str: ...
def retry_on_error(max_retries: int = 3, initial_delay: float = 1.0) -> Callable: ...

class BatchProcessor:
    monitoring_interval: Incomplete
    cpu_threshold: Incomplete
    memory_threshold: Incomplete
    last_check_time: Incomplete
    psutil: Incomplete
    total_processed: int
    total_errors: int
    processing_times: list
    max_workers: Incomplete
    batch_size: Incomplete
    min_batch_size: int
    max_batch_size: int
    backoff_factor: float
    success_factor: float
    def __init__(self, max_workers: int | None = None, initial_batch_size: int | None = None, monitoring_interval: float = 5.0, cpu_threshold: float = 80.0, memory_threshold: float = 85.0) -> None: ...
    def adjust_batch_size(self, success: bool, processing_time: float | None = None) -> None: ...
    def get_performance_metrics(self) -> dict[str, Any]: ...

def download_github_subdirectory(repo: str, subdir: str, data_dir: Path, branch: str = 'main'): ...
def generate_prompt_for_structured_output(response_format: type[BaseModel] | None, user_message: str) -> str: ...
def with_timeout(timeout=None): ...
def browser_toolkit_save_auth_cookie(cookie_json_path: str, url: str, wait_time: int = 60): ...
